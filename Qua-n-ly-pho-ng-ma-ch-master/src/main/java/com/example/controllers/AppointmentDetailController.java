package com.example.controllers;

import com.example.DAO.*;
import com.example.model.*;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Optional;


public class AppointmentDetailController {

    @FXML private TextField txtMaBenhNhan,txtHoTen, txtSoDienThoai, txtGioBatDau, txtGioKetThuc;
    @FXML private DatePicker dateNgaySinh, dateNgayKham;
    @FXML private ChoiceBox<String> cbGioiTinh;
    @FXML private ComboBox<String> cbMaBacSi;
    @FXML private TextArea txtLyDo;
    @FXML private Button btnLuu,btnPhieuKhamBenh,btnChonBenhNhanCu;

    private AppointmentEntry entry;
    private AppointmentModel model;
    private Runnable onRefreshCallback;
    private boolean isNewAppointment = false; // Th√™m flag ƒë·ªÉ x√°c ƒë·ªãnh l·ªãch h·∫πn m·ªõi

    public void setOnRefreshCallback(Runnable callback) {
        this.onRefreshCallback = callback;
    }

    public void setEntry(AppointmentEntry entry) {
        this.entry = entry;
        this.model = entry.getModel();
        cbMaBacSi.setItems(FXCollections.observableArrayList(StaffDAO.getDoctorIds()));
        // Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† l·ªãch h·∫πn m·ªõi kh√¥ng
        if (isNullOrEmpty(model.getMaBenhNhan()) && isNullOrEmpty(model.getHoTen())) {
            // ƒê√¢y l√† l·ªãch h·∫πn m·ªõi - ch·ªâ hi·ªÉn th·ªã placeholder, ch∆∞a sinh m√£
            isNewAppointment = true;
            txtMaBenhNhan.setPromptText("M√£ s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫°o");
            txtMaBenhNhan.setText(""); // ƒê·ªÉ tr·ªëng
        } else {
            // ƒê√¢y l√† l·ªãch h·∫πn ƒë√£ t·ªìn t·∫°i
            isNewAppointment = false;
            txtMaBenhNhan.setText(model.getMaBenhNhan());
        }

        txtHoTen.setText(model.getHoTen());
        txtSoDienThoai.setText(model.getSoDienThoai());
        dateNgaySinh.setValue(model.getNgaySinh());
        cbGioiTinh.getItems().setAll("Nam", "N·ªØ");
        cbGioiTinh.setValue(model.getGioiTinh());
        cbMaBacSi.setValue(model.getMaBacSi());
        txtLyDo.setText(model.getLyDoKham());

        // G√°n ng√†y kh√°m chung
        dateNgayKham.setValue(entry.getStartDate());
        txtGioBatDau.setText(entry.getStartTime().toString());
        txtGioKetThuc.setText(entry.getEndTime().toString());

        btnPhieuKhamBenh.setOnAction(e-> handlePhieuKham());

        // G√°n s·ª± ki·ªán cho button L∆∞u d·ª±a tr√™n tr·∫°ng th√°i
        if (isNewAppointment) {
            btnLuu.setOnAction(e -> handleLuuMoi());
            btnLuu.setText("L∆∞u m·ªõi"); // Thay ƒë·ªïi text ƒë·ªÉ ph√¢n bi·ªát
        } else {
            btnLuu.setOnAction(e -> handleLuu());
            btnLuu.setText("C·∫≠p nh·∫≠t");
        }

        // Th√™m listener ƒë·ªÉ t·ª± ƒë·ªông sinh m√£ khi ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu nh·∫≠p th√¥ng tin
        addAutoGenerateListeners();

        handlePermission();
    }

    private void addAutoGenerateListeners() {
        if (isNewAppointment) {
            // Listener cho tr∆∞·ªùng h·ªç t√™n
            txtHoTen.focusedProperty().addListener((obs, oldVal, newVal) -> {
                if (newVal && txtMaBenhNhan.getText().trim().isEmpty()) {
                    generateNewPatientCode();
                }
            });

            // Listener cho tr∆∞·ªùng s·ªë ƒëi·ªán tho·∫°i
            txtSoDienThoai.focusedProperty().addListener((obs, oldVal, newVal) -> {
                if (newVal && txtMaBenhNhan.getText().trim().isEmpty()) {
                    generateNewPatientCode();
                }
            });

            // Listener cho DatePicker ng√†y sinh
            dateNgaySinh.focusedProperty().addListener((obs, oldVal, newVal) -> {
                if (newVal && txtMaBenhNhan.getText().trim().isEmpty()) {
                    generateNewPatientCode();
                }
            });

            // Listener cho ChoiceBox gi·ªõi t√≠nh
            cbGioiTinh.focusedProperty().addListener((obs, oldVal, newVal) -> {
                if (newVal && txtMaBenhNhan.getText().trim().isEmpty()) {
                    generateNewPatientCode();
                }
            });
        }
    }

    private void generateNewPatientCode() {
        if (isNewAppointment && txtMaBenhNhan.getText().trim().isEmpty()) {
            int nextId = com.example.DAO.PatientDAO.getNextIdNumber("BN");
            String maBenhNhan = "BN" + nextId;
            txtMaBenhNhan.setText(maBenhNhan);
            System.out.println("üîß DEBUG: ƒê√£ sinh m√£ b·ªánh nh√¢n m·ªõi: " + maBenhNhan);
        }
    }

    private boolean isNullOrEmpty(String s) {
        return s == null || s.trim().isEmpty();
    }

    private void handleLuuMoi() {
        System.out.println("üîß DEBUG: handleLuuMoi() ƒë∆∞·ª£c g·ªçi");

        // Sinh m√£ b·ªánh nh√¢n n·∫øu ch∆∞a c√≥
        if (txtMaBenhNhan.getText().trim().isEmpty()) {
            generateNewPatientCode();
        }

        // L·∫•y d·ªØ li·ªáu t·ª´ giao di·ªán
        String hoTen = txtHoTen.getText().trim();
        String maBenhNhan = txtMaBenhNhan.getText().trim();
        String soDienThoai = txtSoDienThoai.getText().trim();
        LocalDate ngaySinh = dateNgaySinh.getValue();
        String gioiTinh = cbGioiTinh.getValue();
        String lyDo = txtLyDo.getText().trim();
        LocalDate ngayKham = dateNgayKham.getValue();
        String gioBatDauStr = txtGioBatDau.getText().trim();
        String gioKetThucStr = txtGioKetThuc.getText().trim();
        String maBacSi = cbMaBacSi.getValue();

        System.out.println("üîß DEBUG: D·ªØ li·ªáu ƒë·∫ßu v√†o:");
        System.out.println("  - H·ªç t√™n: " + hoTen);
        System.out.println("  - M√£ b·ªánh nh√¢n: " + maBenhNhan);
        System.out.println("  - SƒêT: " + soDienThoai);
        System.out.println("  - Ng√†y sinh: " + ngaySinh);
        System.out.println("  - Gi·ªõi t√≠nh: " + gioiTinh);
        System.out.println("  - L√Ω do: " + lyDo);
        System.out.println("  - Ng√†y kh√°m: " + ngayKham);
        System.out.println("  - Gi·ªù b·∫Øt ƒë·∫ßu: " + gioBatDauStr);
        System.out.println("  - Gi·ªù k·∫øt th√∫c: " + gioKetThucStr);
        System.out.println("  - M√£ b√°c sƒ©: " + maBacSi);

        // Ki·ªÉm tra th√¥ng tin ƒë·∫ßu v√†o
        if (hoTen.isEmpty() || soDienThoai.isEmpty() || ngaySinh == null || gioiTinh == null
                || ngayKham == null || maBenhNhan.isEmpty() || gioBatDauStr.isEmpty() || gioKetThucStr.isEmpty()) {
            System.out.println("‚ùå DEBUG: Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc");
            showAlert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.");
            return;
        }

        // Chuy·ªÉn ƒë·ªïi th·ªùi gian
        LocalTime gioBatDau;
        LocalTime gioKetThuc;
        try {
            gioBatDau = LocalTime.parse(gioBatDauStr);
            gioKetThuc = LocalTime.parse(gioKetThucStr);
            System.out.println("‚úÖ DEBUG: ƒê√£ parse th·ªùi gian th√†nh c√¥ng");
        } catch (Exception e) {
            System.out.println("‚ùå DEBUG: L·ªói parse th·ªùi gian: " + e.getMessage());
            showAlert("Th·ªùi gian kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng HH:mm.");
            return;
        }

        if (!gioBatDau.isBefore(gioKetThuc)) {
            System.out.println("‚ùå DEBUG: Gi·ªù b·∫Øt ƒë·∫ßu kh√¥ng tr∆∞·ªõc gi·ªù k·∫øt th√∫c");
            showAlert("Gi·ªù b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc gi·ªù k·∫øt th√∫c.");
            return;
        }

        // Ki·ªÉm tra v√† th√™m b·ªánh nh√¢n n·∫øu ch∆∞a t·ªìn t·∫°i
        System.out.println("üîß DEBUG: Ki·ªÉm tra b·ªánh nh√¢n t·ªìn t·∫°i...");
        PatientModel existingPatient = PatientDAO.getById(maBenhNhan);
        boolean isNewPatient = false;

        if (existingPatient == null) {
            System.out.println("üîß DEBUG: B·ªánh nh√¢n ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi...");
            // B·ªánh nh√¢n ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
            PatientModel newPatient = new PatientModel(
                    maBenhNhan,
                    hoTen,
                    ngaySinh,
                    soDienThoai,
                    gioiTinh
            );

            boolean patientInserted = PatientDAO.insert(newPatient);
            if (!patientInserted) {
                System.out.println("‚ùå DEBUG: Kh√¥ng th·ªÉ th√™m b·ªánh nh√¢n m·ªõi");
                showAlert("Kh√¥ng th·ªÉ th√™m b·ªánh nh√¢n m·ªõi! Vui l√≤ng th·ª≠ l·∫°i.");
                return;
            }
            isNewPatient = true;
            System.out.println("‚úÖ DEBUG: ƒê√£ th√™m b·ªánh nh√¢n m·ªõi: " + maBenhNhan);
        } else {
            System.out.println("üîß DEBUG: B·ªánh nh√¢n ƒë√£ t·ªìn t·∫°i, ki·ªÉm tra c·∫≠p nh·∫≠t...");
            // Logic c·∫≠p nh·∫≠t b·ªánh nh√¢n (gi·ªØ nguy√™n nh∆∞ c≈©)
            if (!existingPatient.getHoTen().equals(hoTen) ||
                    !existingPatient.getSoDienThoai().equals(soDienThoai) ||
                    !existingPatient.getNgaySinh().equals(ngaySinh) ||
                    !existingPatient.getGioiTinh().equals(gioiTinh)) {

                System.out.println("üîß DEBUG: Th√¥ng tin b·ªánh nh√¢n kh√°c, c·∫ßn c·∫≠p nh·∫≠t");
                Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
                alert.setTitle("X√°c nh·∫≠n");
                alert.setHeaderText(null);
                alert.setContentText("B·ªánh nh√¢n ƒë√£ t·ªìn t·∫°i v·ªõi th√¥ng tin kh√°c. B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t th√¥ng tin kh√¥ng?");

                Optional<ButtonType> result = alert.showAndWait();
                boolean updatePatient = result.isPresent() && result.get() == ButtonType.OK;

                if (updatePatient) {
                    PatientModel updatedPatient = new PatientModel(
                            maBenhNhan,
                            hoTen,
                            ngaySinh,
                            soDienThoai,
                            gioiTinh
                    );

                    boolean patientUpdated = PatientDAO.update(updatedPatient);
                    if (!patientUpdated) {
                        System.out.println("‚ùå DEBUG: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin b·ªánh nh√¢n");
                        showAlert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin b·ªánh nh√¢n!");
                        return;
                    }
                    System.out.println("‚úÖ DEBUG: ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin b·ªánh nh√¢n: " + maBenhNhan);
                }
            }
        }

        // T·∫°o m√£ kh√°m b·ªánh m·ªõi
        String maKhamBenh = "KB" + HenKhamBenhDAO.getNextIdNumber("KB");
        System.out.println("üîß DEBUG: M√£ kh√°m b·ªánh m·ªõi: " + maKhamBenh);

        // T·∫°o model l·ªãch h·∫πn
        AppointmentModel model = new AppointmentModel();
        model.setMaKhamBenh(maKhamBenh);
        model.setMaBenhNhan(maBenhNhan);
        model.setLyDoKham(lyDo);
        model.setNgayKham(ngayKham);
        model.setGioBatDau(gioBatDau);
        model.setGioKetThuc(gioKetThuc);
        model.setMaBacSi(maBacSi);

        System.out.println("üîß DEBUG: Th√¥ng tin l·ªãch h·∫πn chu·∫©n b·ªã l∆∞u:");
        System.out.println("  - M√£ kh√°m b·ªánh: " + maKhamBenh);
        System.out.println("  - M√£ b·ªánh nh√¢n: " + maBenhNhan);
        System.out.println("  - L√Ω do kh√°m: " + lyDo);
        System.out.println("  - Ng√†y kh√°m: " + ngayKham);
        System.out.println("  - Gi·ªù b·∫Øt ƒë·∫ßu: " + gioBatDau);
        System.out.println("  - Gi·ªù k·∫øt th√∫c: " + gioKetThuc);
        System.out.println("  - M√£ b√°c sƒ©: " + maBacSi);

        // G·ªçi DAO ƒë·ªÉ l∆∞u l·ªãch h·∫πn
        System.out.println("üîß DEBUG: ƒêang l∆∞u l·ªãch h·∫πn...");
        boolean success = HenKhamBenhDAO.insert(model);

        if (success) {
            System.out.println("‚úÖ DEBUG: L∆∞u l·ªãch h·∫πn th√†nh c√¥ng!");

            // T·∫†O PHI·∫æU KH√ÅM B·ªÜNH R·ªñNG
            System.out.println("üîß DEBUG: T·∫°o PhieuKhamBenh r·ªóng...");
            String maPhieuKham = "PKB" + MedicalReportDAO.getNextIdNumber("PKB");

            MedicalReportModel emptyReport = new MedicalReportModel();
            emptyReport.setMaPhieuKham(maPhieuKham);
            emptyReport.setMaBenhNhan(maBenhNhan);
            emptyReport.setMaBacSi(maBacSi);
            emptyReport.setChanDoan(""); // Ch·∫©n ƒëo√°n r·ªóng

            // T·∫°o phi·∫øu kh√°m v·ªõi th√¥ng tin r·ªóng
            LocalDateTime ngayKhamDateTime = ngayKham.atTime(gioBatDau); // Ng√†y kh√°m v·ªõi gi·ªù b·∫Øt ƒë·∫ßu
            LocalDateTime ngayLapPhieu = LocalDateTime.now(); // Ng√†y l·∫≠p phi·∫øu l√† hi·ªán t·∫°i

            boolean phieuKhamCreated = MedicalReportDAO.insertPhieuKhamBenh(
                    emptyReport,
                    ngayKhamDateTime,
                    ngayLapPhieu,
                    "", // ƒêi·ªÅu tr·ªã r·ªóng
                    ""  // K·∫øt qu·∫£ kh√°m r·ªóng
            );

            if (phieuKhamCreated) {
                System.out.println("‚úÖ DEBUG: T·∫°o PhieuKhamBenh r·ªóng th√†nh c√¥ng: " + maPhieuKham);
            } else {
                System.out.println("‚ö†Ô∏è DEBUG: Kh√¥ng th·ªÉ t·∫°o PhieuKhamBenh r·ªóng, nh∆∞ng l·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c l∆∞u");
            }
            DonThuocModel newDonThuoc = new DonThuocModel();
            String maDonThuoc = "DT" + DonThuocDAO.getNextIdNumber("DT");
            newDonThuoc.setNgayLapDon(ngayLapPhieu);
            newDonThuoc.setMaDonThuoc(maDonThuoc);
            newDonThuoc.setMaPhieuKham(maPhieuKham);
            boolean success2 = DonThuocDAO.insert(newDonThuoc);
            if (success2) {
                System.out.println("Th√™m ƒë∆°n thu·ªëc th√†nh c√¥ng" + maDonThuoc );
            } else {
                System.out.println("Th√™m ƒë∆°n thu·ªëc th·∫•t b·∫°i!");
            }

            // T·∫°o h√≥a ƒë∆°n r·ªóng duy nh·∫•t cho phi·∫øu kh√°m n√†y n·∫øu ch∆∞a c√≥
            String maHoaDon = "HD" + maPhieuKham;
            String tenHoaDon = "H√≥a ƒë∆°n kh√°m b·ªánh - " + hoTen;
            BillModel newBill = new BillModel();
            newBill.setMaHoaDon(maHoaDon);
            newBill.setMaPhieuKham(maPhieuKham);
            newBill.setMaDonThuoc(maDonThuoc);
            newBill.setTongTien(QuiDinhDAO.getGiaTri("DEFAULT_TIEN_KHAM").doubleValue()); // Ti·ªÅn kh√°m m·∫∑c ƒë·ªãnh
            newBill.setTrangThai("Ch∆∞a thanh to√°n");
            LocalDateTime ngayLapHoaDon = LocalDateTime.now();

            // Ki·ªÉm tra n·∫øu ch∆∞a c√≥ h√≥a ƒë∆°n th√¨ m·ªõi t·∫°o
            BillModel existingBill = BillDAO.getBillById(maHoaDon);
            if (existingBill == null) {
                boolean billCreated = BillDAO.insertBill(newBill, tenHoaDon, ngayLapHoaDon);
                if (billCreated) {
                    System.out.println("‚úÖ DEBUG: T·∫°o h√≥a ƒë∆°n th√†nh c√¥ng: " + maHoaDon);
                } else {
                    System.out.println("‚ö†Ô∏è DEBUG: Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n, nh∆∞ng l·ªãch h·∫πn v√† phi·∫øu kh√°m ƒë√£ ƒë∆∞·ª£c l∆∞u");
                }
            } else {
                System.out.println("‚ÑπÔ∏è DEBUG: H√≥a ƒë∆°n ƒë√£ t·ªìn t·∫°i, kh√¥ng t·∫°o m·ªõi");
            }

            // C·∫≠p nh·∫≠t model v√†o entry ƒë·ªÉ hi·ªÉn th·ªã tr√™n calendar
            this.model.setMaKhamBenh(maKhamBenh);
            this.model.setMaBenhNhan(maBenhNhan);
            this.model.setHoTen(hoTen);
            this.model.setSoDienThoai(soDienThoai);
            this.model.setNgaySinh(ngaySinh);
            this.model.setGioiTinh(gioiTinh);
            this.model.setLyDoKham(lyDo);
            this.model.setNgayKham(ngayKham);
            this.model.setGioBatDau(gioBatDau);
            this.model.setGioKetThuc(gioKetThuc);
            this.model.setMaBacSi(maBacSi);

            // C·∫≠p nh·∫≠t entry title
            entry.setTitle(hoTen + " - " + lyDo);

            String message = isNewPatient ?
                    "ƒê√£ th√™m b·ªánh nh√¢n m·ªõi, l∆∞u l·ªãch h·∫πn v√† t·∫°o phi·∫øu kh√°m th√†nh c√¥ng!" :
                    "ƒê√£ l∆∞u l·ªãch h·∫πn m·ªõi v√† t·∫°o phi·∫øu kh√°m th√†nh c√¥ng!";
            showInfo(message);

            if (onRefreshCallback != null) {
                onRefreshCallback.run(); // g·ªçi refresh ·ªü controller cha
            }

            // ƒê√≥ng c·ª≠a s·ªï sau khi l∆∞u th√†nh c√¥ng
            Stage stage = (Stage) btnLuu.getScene().getWindow();
            stage.close();

        } else {
            System.out.println("‚ùå DEBUG: L∆∞u l·ªãch h·∫πn th·∫•t b·∫°i!");
            showAlert("Kh√¥ng th·ªÉ l∆∞u l·ªãch h·∫πn!");

            // N·∫øu l√† b·ªánh nh√¢n m·ªõi v√† l∆∞u l·ªãch h·∫πn th·∫•t b·∫°i, c√≥ th·ªÉ c·∫ßn x√≥a b·ªánh nh√¢n v·ª´a t·∫°o
            if (isNewPatient) {
                Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
                alert.setTitle("X√°c nh·∫≠n");
                alert.setHeaderText(null);
                alert.setContentText("L∆∞u l·ªãch h·∫πn th·∫•t b·∫°i. B·∫°n c√≥ mu·ªën x√≥a b·ªánh nh√¢n v·ª´a t·∫°o kh√¥ng?");

                Optional<ButtonType> result = alert.showAndWait();
                boolean rollbackPatient = result.isPresent() && result.get() == ButtonType.OK;

                if (rollbackPatient) {
                    PatientDAO.delete(maBenhNhan);
                    txtMaBenhNhan.setText(""); // Reset m√£ b·ªánh nh√¢n
                    System.out.println("‚úÖ DEBUG: ƒê√£ x√≥a b·ªánh nh√¢n do l∆∞u l·ªãch h·∫πn th·∫•t b·∫°i: " + maBenhNhan);
                }
            }
        }
    }

    private void handlePhieuKham() {
        try {
            // Load phi·∫øu kh√°m b·ªánh t·ª´ database d·ª±a v√†o m√£ kh√°m b·ªánh
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/medical_report.fxml"));
            Parent view = loader.load();

            MedicalReportController controller = loader.getController();

            // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ load d·ªØ li·ªáu t·ª´ database
            controller.loadMedicalReportByMaKhamBenh(model.getMaKhamBenh());
            controller.refreshMedicineList();
            // Sau khi load phi·∫øu kh√°m, load l·∫°i ƒë∆°n thu·ªëc
            controller.refreshMedicineList();

            // T·∫°o m·ªôt c·ª≠a s·ªï m·ªõi (Stage)
            Stage stage = new Stage();
            stage.setTitle("Phi·∫øu kh√°m b·ªánh");
            stage.setScene(new Scene(view, 800, 600)); // Set k√≠ch th∆∞·ªõc c·ª≠a s·ªï

            stage.setResizable(false); // Kh√¥ng cho resize
            stage.initModality(Modality.APPLICATION_MODAL); // Ch·∫∑n c√°c c·ª≠a s·ªï kh√°c cho ƒë·∫øn khi ƒë√≥ng

            // Hi·ªÉn th·ªã c·ª≠a s·ªï v√† ch·ªù ƒë√≥ng
            stage.showAndWait();

        } catch (IOException e) {
            showAlert("Kh√¥ng th·ªÉ m·ªü phi·∫øu kh√°m: " + e.getMessage());
        }
    }

    private void handleLuu() {
        try {
            // L·∫•y th√¥ng tin t·ª´ giao di·ªán
            String maBenhNhan = txtMaBenhNhan.getText().trim();
            String hoTen = txtHoTen.getText().trim();
            String sdt = txtSoDienThoai.getText().trim();
            LocalDate ngaySinh = dateNgaySinh.getValue();
            String gioiTinh = cbGioiTinh.getValue();
            String lyDo = txtLyDo.getText().trim();
            String maBacSi = cbMaBacSi.getValue();
            LocalDate ngayKham = dateNgayKham.getValue();
            LocalTime gioBatDau = LocalTime.parse(txtGioBatDau.getText().trim());
            LocalTime gioKetThuc = LocalTime.parse(txtGioKetThuc.getText().trim());

            if (!gioBatDau.isBefore(gioKetThuc)) {
                showAlert("Gi·ªù b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc gi·ªù k·∫øt th√∫c.");
                return;
            }

            // C·∫≠p nh·∫≠t entry trong calendar view
            entry.changeStartDate(ngayKham);
            entry.changeStartTime(gioBatDau);
            entry.changeEndDate(ngayKham);
            entry.changeEndTime(gioKetThuc);
            entry.setTitle(hoTen + " - " + lyDo);

            // C·∫≠p nh·∫≠t d·ªØ li·ªáu trong model
            model.setMaBenhNhan(maBenhNhan);
            model.setHoTen(hoTen);
            model.setSoDienThoai(sdt);
            model.setNgaySinh(ngaySinh);
            model.setGioiTinh(gioiTinh);
            model.setLyDoKham(lyDo);
            model.setNgayKham(ngayKham);
            model.setGioBatDau(gioBatDau);
            model.setGioKetThuc(gioKetThuc);
            model.setMaBacSi(maBacSi);

            // C·∫≠p nh·∫≠t v√†o database
            boolean success = HenKhamBenhDAO.update(model);
            if (success) {
                System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·ªãch h·∫πn: " + model.getMaKhamBenh());
                Stage stage = (Stage) btnLuu.getScene().getWindow();
                stage.close();
            } else {
                showAlert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l·ªãch h·∫πn!");
            }

        } catch (DateTimeParseException ex) {
            showAlert("ƒê·ªãnh d·∫°ng gi·ªù kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p HH:mm");
        } catch (Exception ex) {
            showAlert("L·ªói khi l∆∞u th√¥ng tin: " + ex.getMessage());
        }
    }

    @FXML
    private void handleChonBenhNhanCu() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/PatientSelectionDialog.fxml"));
            Parent root = loader.load();

            Stage dialogStage = new Stage();
            dialogStage.setScene(new Scene(root));
            dialogStage.setTitle("Ch·ªçn b·ªánh nh√¢n");

            dialogStage.initModality(Modality.APPLICATION_MODAL);

            PatientSelectionDialogController controller = loader.getController();

            dialogStage.showAndWait();

            PatientModel selected = controller.getSelectedBenhNhan();
            if (selected != null) {
                txtMaBenhNhan.setText(selected.getMaBenhNhan());
                txtHoTen.setText(selected.getHoTen());
                txtSoDienThoai.setText(selected.getSoDienThoai());
                dateNgaySinh.setValue(selected.getNgaySinh());
                cbGioiTinh.setValue(selected.getGioiTinh());
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void handlePermission(){
        Role role = UserContext.getInstance().getRole();
        switch (role) {
            case ADMIN -> {

            }
            case DOCTOR -> {
                btnChonBenhNhanCu.setVisible(false);
                txtMaBenhNhan.setEditable(false);
                txtHoTen.setEditable(false);
                txtSoDienThoai.setEditable(false);
                txtGioBatDau.setEditable(false);
                txtGioKetThuc.setEditable(false);
                txtLyDo.setEditable(false);
                btnLuu.setVisible(false);
                cbGioiTinh.setDisable(true);
                dateNgaySinh.setEditable(false);
                dateNgayKham.setEditable(false);
            }
            case NURSE -> {

            }
            case MANAGER -> {
                btnChonBenhNhanCu.setVisible(false);
                txtMaBenhNhan.setEditable(false);
                txtHoTen.setEditable(false);
                txtSoDienThoai.setEditable(false);
                txtGioBatDau.setEditable(false);
                txtGioKetThuc.setEditable(false);
                txtLyDo.setEditable(false);
                btnLuu.setVisible(false);
                cbGioiTinh.setDisable(true);
                dateNgaySinh.setEditable(false);
                dateNgayKham.setEditable(false);
            }
        }
    }

    private void showAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("L·ªói");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void showInfo(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Th√¥ng b√°o");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}